general:
  app_name: code-gen-agent
  description: Amazon Bedrock Agent for generating code for the USACO benchmark
  role_name: CodeGenLambdaRole
  region: us-east-1
  model_id: amazon.nova-micro-v1:0
  agent_instructions: |
    Generate Python code for the USACO problems. You have access to a tool for generating the code.
  ttl: 1800

action_group:
  name: Generate_Python_code
  description: Generates Python code by using foundation models

prompt_info:
  name: "USACO_{model_id}"
  description: "Generate code for the USACO benchmark"

prompt_templates:
  nova:
    models:
    - us.amazon.nova-pro-v1:0
    - us.amazon.nova-lite-v1:0
    - us.amazon.nova-micro-v1:0
    text: |
      Please reply with a Python 3 solution to the below problem. Read the general instructions below that are applicable to every task,

      {{question}}

      Important instructions to follow:

      1. Ensure that your code is wrapped in '```python' and '```' Markdown delimiters.
      2. Provide exactly one block of code containing the entire solution.
      3. The code should include a main function and an `if __name__ == "__main__"` block as the entry point.
      4. Begin by reasoning through the problem and conceptualizing a solution. Then, write pseudocode, and finally output the Python code with your solution steps in comments.
      5. Carefully examine the SAMPLE INPUT: and SAMPLE OUTPUT: sections provided as part of the problem and follow the format exactly as specified there.
      6. If there are empty lines separating multiple sample inputs in the SAMPLE INPUT: section provided in the problem, handle them appropriately.
      7. Do not use any outside libraries.

  claude:
    models:
    - us.anthropic.claude-3-5-haiku-20241022-v1:0
    - us.anthropic.claude-3-5-sonnet-20241022-v2:0
    text: |
      Please reply with a Python 3 solution to the below problem. Read the general instructions below
      that are applicable to every task,

      <instructions>
      1. Make sure to wrap your code in '```python' and '```' Markdown delimiters.
      2. Include exactly one block of code with the entire solution.
      3. The code should always have main function and an if __name__ == "__main__" block as the entrypoint.
      4. Reason through the problem and conceptualize a solution first, then write pseudocode, and finally output the Python with your solution steps in comments.
      5. Carefully examine the SAMPLE INPUT: and SAMPLE OUTPUT: sections provided as part of the problem and follow the format exactly as specified there.
      6. There might be empty lines separating multiple sample inputs, check the SAMPLE INPUT: section provided in the problem, if there are empty lines separating different inputs then handle them appropriately.
      7. No outside libraries are allowed.
      </instructions> 

      <problem>>
      {{question}}
      </problem>

inference_parameters:
  temperature: 0.7
  max_tokens: 2000